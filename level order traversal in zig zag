
/* A binary tree node has data, pointer to left child
   and a pointer to right child  
struct Node
{
    int data;
    struct Node* left;
    struct Node* right;
    
    Node(int x){
        data = x;
        left = right = NULL;
    }
}; */


//Function to return a list containing the level order traversal in spiral form.
vector<int> findSpiral(Node *root)
{
    vector<int> v;
    if(root==NULL)return v;
    
    stack<Node*>curr;
    stack<Node*>next;
    
    bool leftToright=true;
    curr.push(root); 
    
    while(!curr.empty())
    {
        Node *temp=curr.top();
        curr.pop();
        
        if(temp)
        {
            v.push_back(temp->data);
            
            if(!leftToright)
            {
                if(temp->left)
                    next.push(temp->left);
                if(temp->right)
                    next.push(temp->right);
            }
            else
            {
                if(temp->right)
                    next.push(temp->right);
               if(temp->left)
                    next.push(temp->left);
            }
        }
        if(curr.empty())
        {
            leftToright=!leftToright;
            swap(curr,next);
        }
    }
    return v;
}


